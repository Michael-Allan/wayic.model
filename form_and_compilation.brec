Form and compilation of way models

    - A way model is a waycast in compiled, executable form,
      as opposed to the initial, written form of its source code.
        : cf. `^^ Simulacrum$` @ http://reluk.ca/project/Breccia/language_definition.brec
        - A representation of an aimed way of life.
        - A Waybreccian simulacrum.
    - It comprises a compiled directory of files, each originating either in the waycast
      or elsewhere subjoint of it.
    - It results from compiling the waycast.
        : re `compiling` see `^^ Compilation$`



    ━━━━━━━━━━━━━
     Compilation
    ─────────────
        : cf. @ http://reluk.ca/project/Breccia/language_definition.brec
        - Compilation of a way model from a waycast.

        compile( waycast `w` )
            : join `^^simulacral reference$` @ `^^ Note$`
            deem+ `m` a way model
            0+ Initialize
                if( `w` contains at its base a file or directory named `:` )
                    throw+ Disallowed file name
                + Add to `m` all files of `w`.
            1+ Intern
            2+ Patch
            3+ Compile
                deem+ `pp` a list of file paths, those of the files of `m`
                + Set `pp` to `order by path( pp )`.
                for( each file `f` of `pp` )
                    : cf. `^^compile( Breccian file` @
                      http://reluk.ca/project/Breccia/language_definition.brec
                    for( each associative reference `rA` of `f` in linear order )
                        / Compiled early, associative references find their referents in the way model
                          before its transformation in later compilations.
                        deem+ `uP` a URI, initially null;
                              `iF` any resource indicant of `rA`;
                              `p` a file path, that of an interned file
                        if( `iF` is present )
                            deem+ `u` the URI reference of `iF`
                            if( `u` is a URI )
                                : re `URI ` see https://tools.ietf.org/html/rfc3986#section-3
                                + Set `p` to `interned path( u )`.
                                if( `p` is not null )
                                    + Set `uP` to `u`.
                                    + Rebase `u` to `p`.
                                    + Rewrite the URI reference of `iF`, changing it to `u`.
                        try
                            compile(+ `rA` )
                                : join `^^compile( associative reference )$` @
                                  http://reluk.ca/project/Breccia/language_definition.brec
                        catch( `x`: broken reference, pattern not found )
                            if( `uP` is not null )
                                + Rewrite the URI reference of `iF`, changing it back to `uP`.
                                compile(+ `rA` )
                                warn+ Loose reference: its referent unfound in the patched waysource
                                  of `p`, it is left uninterned, referring outside the way model
                                    / This may occur, for instance, when conflict resolution has
                                      pre-emptively disabled one or more extracast patches.

        order by path( list of file paths `pp` )
            + Sort `pp` into lexicographic order based on Unicode code points.
            return+ `pp`



    ━━━━━━━━━━━━
     Internment
    ────────────
        - All extracast files of a way model are copied, collated and stored (interned) within the model
          at a path formed as follows.

              ╶──╴‘:/’╶── authority ── path ───▶

                : re `authority` see https://tools.ietf.org/html/rfc3986#section-3.2
                : re `path` see https://tools.ietf.org/html/rfc3986#section-3.3
            - The authority and path components of the interned file
              are those of its canonical location as expressed in URI form.
                : re `URI form` see https://tools.ietf.org/html/rfc3986#section-3
        - Regardless of the various forms of reference to an extracast file, whether to its original
          or its various remote internments (any number of which may be combined in the waysource),
          the way model has at most one, interned instance of the file to which all extracast forms
          of reference (in as far as conflict resolution allows) are transformed (interned).
            : re `interned instance` see `^^interned path\( URI`
            / The only difference among the reference forms is that the interned ones each entail (in as
              far as conflict resolution allows) the patches of the interning way model.
        - A public way model includes its internments, to which other waysource may refer.
            / The following, for example, refers to a publicly interned file.
              http://reluk.ca/project/waycast/:/cleo.abacus.au/walt/waycast/foo.brec
            - The referent, in that case, would be the file as seen in the interning way model (M).
                / E.g. `https://cleo.abacus.au/walt/waycast/foo.brec`
                  as seen in `http://reluk.ca/project/waycast/`.
            - Compiling a jointer to such a referent would intern the file from its original waycast,
              while applying (where conflict resolution allows) the patches of M.

        interned path( URI `u` )
            / The path to the interned instance of the referent of `u`, or null if none is interred.
                : re `interned instance` see @ `^^- Regardless of the various forms of reference`
            deem+ `v` a URI, that of `standardize( u )`
                  `p` the internment path derived from `u`
                : re `internment path` see `are .+interned.+ at a path formed as follows`
            if( `p` is  absent from the way model )
                + Set `p` to null.
            return+ `p`
        intern referent( URI `u` )
            / Interns the referent of the given URI, unless already it was interned.
            + Set `u` to `standardize( u )`.
            deem+ `p` the internment path derived from `u`
                : re `internment path` see `are .+interned.+ at a path formed as follows`
            if( `p` is  absent from the way model )
                + Copy the referent of `u` to `p`.
                for( each relative reference `r` in the copy )
                    + Replace `r` with an absolute reference, that of `r` resolved against `u`.
        standardize( URI `u` )
            / Returns the standard form of `u` for internment purposes.
            if( `u` lacks an authority component )
                throw+ Malformed reference
            if( `u` refers to a waycast file )
                + Set `u` to `canonicalize( u )`.
                    : re `canonicalize` see `canonicalize\( URI` @ `^^ Canonical location$` @
                      http://reluk.ca/project/wayic/cast/form_of_a_waycast.brec
                deem+ `uL` a URI, that of the canonical location of the local waycast
                if( `u` begins with `uL` )
                    throw+ Invalid referent for internment: local waycast file
            else
                + Set `u` to normal form.
                    : see https://tools.ietf.org/html/rfc3986#section-6
            return+ `u`



    ━━━━━━
     Note
    ──────
        simulacral reference
            - Herein the default referent is the simulacrum (aka the way model), not the source code.
                : cf. `^^default referent` @ `^^ Simulacrum$` @
                  http://reluk.ca/project/Breccia/language_definition.brec



                                                    \ Copyright © 2020-2021  Michael Allan.  Licence MIT.
